
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Numan
 */
public class tariflistesi extends javax.swing.JFrame {

    /**
     * Creates new form tariflistesi
     */
    public tariflistesi() {
        initComponents();
        
        tariflerTableModel = new DefaultTableModel(new Object[]{"tarifAdi", "kategori", "hazirlamaSuresi", "tarifMaliyeti"}, 0);
        tariflertbl.setModel(tariflerTableModel);
        
        tariflerTableModel4 = new DefaultTableModel(new Object[]{"tarifAdi", "kategori", "hazirlamaSuresi", "tarifMaliyeti", "Uyum Oranı"}, 0);
        
        
        applyFilterswithoutmalzeme();
        
        loadMalzemelerIntoComboBox();
        
        sayfacombo.setSelectedItem("TARİF LİSTESİ");
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sayfacombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tariflertbl = new javax.swing.JTable();
        kullanilacakMalzemelerComboBox = new combomulti.ComboBoxMultiSelection();
        temizlebtn = new javax.swing.JButton();
        aratf = new javax.swing.JTextField();
        arabtn = new javax.swing.JButton();
        siralacb = new javax.swing.JComboBox<>();
        kategoricb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        malzemesayisicb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        altaraliktf = new javax.swing.JTextField();
        ustaraliktf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sayfacombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TARİF LİSTESİ", "TARİF EKLE", "TARİF SİL", "TARİF GÜNCELLE", "MALZEME DÜZENLE" }));
        sayfacombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sayfacomboActionPerformed(evt);
            }
        });

        tariflertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tariflertbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tariflertblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tariflertbl);

        temizlebtn.setText("TEMİZLE");
        temizlebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temizlebtnActionPerformed(evt);
            }
        });

        arabtn.setText("ARA");
        arabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arabtnActionPerformed(evt);
            }
        });

        siralacb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Maliyet Artan", "Maliyet Azalan", "Hazırlama Süresi Artan", "Hazırlama Süresi Azalan" }));

        kategoricb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TÜMÜ", "Aperatif", "Çorba", "Et Yemekleri", "İçecek", "Tatlı" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("KATEGORİ:");

        malzemesayisicb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TÜMÜ", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("MALZEME SAYISI:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("MALİYET ARALIĞI:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kategoricb, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(kullanilacakMalzemelerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(temizlebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(aratf, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arabtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(siralacb, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(malzemesayisicb, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(altaraliktf, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(ustaraliktf, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addComponent(sayfacombo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sayfacombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(kullanilacakMalzemelerComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aratf)
                    .addComponent(temizlebtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(siralacb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(arabtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ustaraliktf)
                            .addComponent(altaraliktf, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(3, 3, 3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(kategoricb, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addComponent(malzemesayisicb, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void temizlebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temizlebtnActionPerformed
        
        kullanilacakMalzemelerComboBox.clearSelectedItems();
        
        
    }//GEN-LAST:event_temizlebtnActionPerformed

    private void arabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arabtnActionPerformed
        
        List<String> selectedMalzemeler = Arrays.asList(kullanilacakMalzemelerComboBox.getSelectedItems().toString()
                .replace("[", "").replace("]", ""));
        
        if (selectedMalzemeler.get(0).isEmpty()) {
            applyFilterswithoutmalzeme();
        }
        else {
            applyFilterswithmalzeme();
        }
        
        
    }//GEN-LAST:event_arabtnActionPerformed

    private void tariflertblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tariflertblMouseClicked
        int selectedRow = tariflertbl.getSelectedRow();
        if (selectedRow != -1) {
            String tarifAdi = (String) tariflerTableModel.getValueAt(selectedRow, 0);
            new TarifDetayEkrani(tarifAdi).setVisible(true);
        }
    }//GEN-LAST:event_tariflertblMouseClicked

    private void sayfacomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sayfacomboActionPerformed
        
        if (sayfacombo.getSelectedItem().equals("TARİF LİSTESİ")) {
            
        }
        
        else if (sayfacombo.getSelectedItem().equals("TARİF EKLE")) {
            new tarifekleme().setVisible(true);
            dispose();
            
        }
        
        
        else if (sayfacombo.getSelectedItem().equals("TARİF SİL")) {
            new tarifsilme().setVisible(true);
            dispose();
            
        }
        
        else if (sayfacombo.getSelectedItem().equals("TARİF GÜNCELLE")) {
            new tarifguncelleme().setVisible(true);
            dispose();
        }
        
        else if (sayfacombo.getSelectedItem().equals("MALZEME DÜZENLE")) {
            new malzeme().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_sayfacomboActionPerformed

    private static final String DB_URL = "jdbc:mysql://localhost:3306/yemektarif?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private static final String USER = "root";
    private static final String PASS = "kirpi1974";
    
    private DefaultTableModel tariflerTableModel;
    private DefaultTableModel tariflerTableModel4;
    
    
    private void applyFilterswithmalzeme() {
        
        tariflertbl.setModel(tariflerTableModel4);
        
        List<String> selectedMalzemeler = Arrays.asList(
                kullanilacakMalzemelerComboBox.getSelectedItems().toString()
                .replace("[", "").replace("]", "").split(", ")
        );

        StringBuilder queryBuilder2 = new StringBuilder(
            "SELECT t.TarifAdi, t.Kategori, t.HazirlamaSuresi, " +
                   " SUM(tm.MalzemeMiktar * m.BirimFiyat) AS TarifMaliyeti, " +
                   " (SUM(CASE WHEN m.MalzemeAdi IN " +
            "(" + String.join(", ", selectedMalzemeler.stream().map(s -> "'" + s + "'").toArray(String[]::new)) + ")" + 
            " THEN 1 ELSE 0 END) / COUNT(tm.MalzemeID)) * 100 AS UyumOrani " +
            " FROM tarifler t " +
            " JOIN tarifmalzeme tm ON t.TarifID = tm.TarifID " +
            " JOIN malzemeler m ON tm.MalzemeID = m.MalzemeID " +
            " WHERE 1=1  "
        );

        if (!kategoricb.getSelectedItem().equals("TÜMÜ")) {
            queryBuilder2.append(" AND t.Kategori = ? ");
        }
        
        if (!aratf.getText().isEmpty()) {
            queryBuilder2.append(" AND t.TarifAdi LIKE ? ");
        }

        if (!malzemesayisicb.getSelectedItem().equals("TÜMÜ")) {
            queryBuilder2.append(" AND (SELECT COUNT(*) FROM tarifmalzeme WHERE TarifID = t.TarifID) <= ? ");
        }

        if (!altaraliktf.getText().isEmpty() || !ustaraliktf.getText().isEmpty()) {
            queryBuilder2.append(" GROUP BY t.TarifID HAVING ");
            if (!altaraliktf.getText().isEmpty()) {
                queryBuilder2.append(" TarifMaliyeti >= ? ");
                if (!ustaraliktf.getText().isEmpty()) {
                    queryBuilder2.append(" AND ");
                }
            }
            if (!ustaraliktf.getText().isEmpty()) {
                queryBuilder2.append(" TarifMaliyeti <= ? ");
            }
            queryBuilder2.append(" AND UyumOrani > 0 "); 
        } else {
            queryBuilder2.append(" GROUP BY t.TarifID ");
        }

        if (!selectedMalzemeler.isEmpty() && !selectedMalzemeler.get(0).isEmpty()) {
            queryBuilder2.append(" ORDER BY UyumOrani DESC ");
        }

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement pstmt = conn.prepareStatement(queryBuilder2.toString())) {
             
            int paramIndex = 1;
            if (!kategoricb.getSelectedItem().equals("TÜMÜ")) {
                pstmt.setString(paramIndex++, kategoricb.getSelectedItem().toString());
            }
            if (!aratf.getText().isEmpty()) {
                pstmt.setString(paramIndex++, "%" + aratf.getText() + "%");
            }
            if (!malzemesayisicb.getSelectedItem().equals("TÜMÜ")) {
                pstmt.setInt(paramIndex++, Integer.parseInt(malzemesayisicb.getSelectedItem().toString()));
            }
            if (!altaraliktf.getText().isEmpty()) {
                pstmt.setDouble(paramIndex++, Double.parseDouble(altaraliktf.getText()));
            }
            if (!ustaraliktf.getText().isEmpty()) {
                pstmt.setDouble(paramIndex++, Double.parseDouble(ustaraliktf.getText()));
            }

            System.out.println(queryBuilder2);
            try (ResultSet rs = pstmt.executeQuery()) {
                tariflerTableModel4.setRowCount(0); 
                while (rs.next()) {
                    String tarifAdi = rs.getString("TarifAdi");
                    String kategori = rs.getString("Kategori");
                    int hazirlamaSuresi = rs.getInt("HazirlamaSuresi");
                    double tarifMaliyeti = rs.getDouble("TarifMaliyeti");
                    double uyumOrani = rs.getDouble("UyumOrani");

                    tariflerTableModel4.addRow(new Object[]{tarifAdi, kategori, hazirlamaSuresi, tarifMaliyeti, uyumOrani});
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Filtre uygulanırken hata oluştu: " + e.getMessage());
        }
        
        tariflertbl.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            Double uyumOrani = (Double) table.getValueAt(row, 4); 
            if (uyumOrani != null) {
                if (uyumOrani == 100.0) {
                    c.setBackground(Color.GREEN);
                } else {
                    c.setBackground(Color.RED);
                }
            } else {
                c.setBackground(Color.WHITE); 
            }
            return c;
        }
    });
    }
    
    
    
    
    
    
    
    
    
    
    private void applyFilterswithoutmalzeme() {
        
        tariflertbl.setModel(tariflerTableModel);
        
            StringBuilder queryBuilder = new StringBuilder("""
                SELECT t.TarifAdi, t.Kategori, t.HazirlamaSuresi, 
                       SUM(tm.MalzemeMiktar * m.BirimFiyat) AS TarifMaliyeti
                FROM tarifler t
                JOIN tarifmalzeme tm ON t.TarifID = tm.TarifID
                JOIN malzemeler m ON tm.MalzemeID = m.MalzemeID
                WHERE 1=1
            """);

            if (!kategoricb.getSelectedItem().equals("TÜMÜ")) {
                queryBuilder.append(" AND t.Kategori = ? ");
            }
            if (!aratf.getText().isEmpty()) {
                queryBuilder.append(" AND t.TarifAdi LIKE ? ");
            }
            if (!malzemesayisicb.getSelectedItem().equals("TÜMÜ")) {
                queryBuilder.append(" AND (SELECT COUNT(*) FROM tarifmalzeme WHERE TarifID = t.TarifID) <= ? ");
            }

            if (!altaraliktf.getText().isEmpty() || !ustaraliktf.getText().isEmpty()) {
                queryBuilder.append(" GROUP BY t.TarifID HAVING ");
                if (!altaraliktf.getText().isEmpty()) {
                    queryBuilder.append(" TarifMaliyeti >= ? ");
                    if (!ustaraliktf.getText().isEmpty()) {
                        queryBuilder.append(" AND ");
                    }
                }
                if (!ustaraliktf.getText().isEmpty()) {
                    queryBuilder.append(" TarifMaliyeti <= ? ");
                }
            } else {
                queryBuilder.append(" GROUP BY t.TarifID ");
            }

            if (siralacb.getSelectedItem() != null) {
                String siralama = siralacb.getSelectedItem().toString();
                switch (siralama) {
                    case "Maliyet Artan":
                        queryBuilder.append(" ORDER BY TarifMaliyeti ASC ");
                        break;
                    case "Maliyet Azalan":
                        queryBuilder.append(" ORDER BY TarifMaliyeti DESC ");
                        break;
                    case "Hazırlama Süresi Artan":
                        queryBuilder.append(" ORDER BY t.HazirlamaSuresi ASC ");
                        break;
                    case "Hazırlama Süresi Azalan":
                        queryBuilder.append(" ORDER BY t.HazirlamaSuresi DESC ");
                        break;
                }
            }

            try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                 PreparedStatement pstmt = conn.prepareStatement(queryBuilder.toString())) {

                int paramIndex = 1;
                if (!kategoricb.getSelectedItem().equals("TÜMÜ")) {
                    pstmt.setString(paramIndex++, kategoricb.getSelectedItem().toString());
                }
                if (!aratf.getText().isEmpty()) {
                    pstmt.setString(paramIndex++, "%" + aratf.getText() + "%");
                }
                if (!malzemesayisicb.getSelectedItem().equals("TÜMÜ")) {
                    pstmt.setInt(paramIndex++, Integer.parseInt(malzemesayisicb.getSelectedItem().toString()));
                }
                if (!altaraliktf.getText().isEmpty()) {
                    pstmt.setDouble(paramIndex++, Double.parseDouble(altaraliktf.getText()));
                }
                if (!ustaraliktf.getText().isEmpty()) {
                    pstmt.setDouble(paramIndex++, Double.parseDouble(ustaraliktf.getText()));
                }

                try (ResultSet rs = pstmt.executeQuery()) {
                    tariflerTableModel.setRowCount(0);
                    while (rs.next()) {
                        String tarifAdi = rs.getString("TarifAdi");
                        String kategori = rs.getString("Kategori");
                        int hazirlamaSuresi = rs.getInt("HazirlamaSuresi");
                        double tarifMaliyeti = rs.getDouble("TarifMaliyeti");

                        tariflerTableModel.addRow(new Object[]{tarifAdi, kategori, hazirlamaSuresi, tarifMaliyeti});
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Filtre uygulanırken hata oluştu: " + e.getMessage());
            }

            tariflertbl.setModel(tariflerTableModel);

            tariflertbl.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                               boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    String tarifAdi = (String) table.getValueAt(row, 0); 
                    boolean malzemelerYeterli = checkMalzemelerYeterli(tarifAdi);

                    if (malzemelerYeterli) {
                        c.setBackground(Color.GREEN);
                    } else {
                        c.setBackground(Color.RED);
                    }
                    return c;
                }
            });
    }

    private boolean checkMalzemelerYeterli(String tarifAdi) {
        boolean yeterli = true;

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement pstmt = conn.prepareStatement("""
                 SELECT tm.MalzemeMiktar, m.ToplamMiktar
                 FROM tarifmalzeme tm
                 JOIN malzemeler m ON tm.MalzemeID = m.MalzemeID
                 JOIN tarifler t ON tm.TarifID = t.TarifID
                 WHERE t.TarifAdi = ?
             """)) {

            pstmt.setString(1, tarifAdi);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    double malzemeMiktar = rs.getDouble("MalzemeMiktar");
                    double toplamMiktar = rs.getDouble("ToplamMiktar");

                    if (malzemeMiktar > toplamMiktar) {
                        yeterli = false;
                        break;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return yeterli;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public void loadMalzemelerIntoComboBox() {
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String query = "SELECT MalzemeAdi FROM malzemeler";
            try (PreparedStatement pstmt = conn.prepareStatement(query);
                 ResultSet rs = pstmt.executeQuery()) {

                DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

                while (rs.next()) {
                    String malzemeAdi = rs.getString("MalzemeAdi");
                    comboBoxModel.addElement(malzemeAdi);
                }

                kullanilacakMalzemelerComboBox.setModel(comboBoxModel);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    


   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("raven.combobox");
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
        FlatIntelliJLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tariflistesi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField altaraliktf;
    private javax.swing.JButton arabtn;
    private javax.swing.JTextField aratf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> kategoricb;
    private combomulti.ComboBoxMultiSelection kullanilacakMalzemelerComboBox;
    private javax.swing.JComboBox<String> malzemesayisicb;
    private javax.swing.JComboBox<String> sayfacombo;
    private javax.swing.JComboBox<String> siralacb;
    private javax.swing.JTable tariflertbl;
    private javax.swing.JButton temizlebtn;
    private javax.swing.JTextField ustaraliktf;
    // End of variables declaration//GEN-END:variables
}
