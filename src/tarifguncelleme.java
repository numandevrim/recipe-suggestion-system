
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.HashMap;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Numan
 */
public class tarifguncelleme extends javax.swing.JFrame {

    /**
     * Creates new form tarifguncelleme
     */
    public tarifguncelleme() {
        initComponents();
        
        hedefmodel = new DefaultTableModel(new String[]{"Malzeme Adı", "Miktar", "MalzemeBirim"}, 0);
        kullanilacakmalzemelertbl.setModel(hedefmodel);
        
        kaynakmodel = new DefaultTableModel(new Object[]{"MalzemeAdi"}, 0);
        malzemelertbl.setModel(kaynakmodel);
        
        malzemeBirimMap = new HashMap<>();
        
        loadTarifAdiFromDatabase();
        
        loadDataFromDatabase();
        
        sayfacombo.setSelectedItem("TARİF GÜNCELLE");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        miktartf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        talimatta = new javax.swing.JTextArea();
        birimlbl = new javax.swing.JLabel();
        kategoricb = new javax.swing.JComboBox<>();
        sayfacombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        kullanilacakmalzemelertbl = new javax.swing.JTable();
        yenimalzemeadtf = new javax.swing.JTextField();
        malzemeyisilbtn = new javax.swing.JButton();
        yenimalzemebirimcb = new javax.swing.JComboBox<>();
        yenimalzemeeklebtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        malzemelertbl = new javax.swing.JTable();
        malzemekullanbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        suretf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tarifadcb = new javax.swing.JComboBox<>();
        tarifguncellebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("YAPILIŞ TALİMATLARI :");

        talimatta.setColumns(20);
        talimatta.setRows(5);
        jScrollPane1.setViewportView(talimatta);

        birimlbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        birimlbl.setText("KG");

        kategoricb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aperatif", "Çorba", "Et Yemekleri", "İçecek", "Tatlı" }));

        sayfacombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TARİF LİSTESİ", "TARİF EKLE", "TARİF SİL", "TARİF GÜNCELLE", "MALZEME DÜZENLE" }));
        sayfacombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sayfacomboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("(DK)");

        kullanilacakmalzemelertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(kullanilacakmalzemelertbl);

        malzemeyisilbtn.setText("MALZEMEYİ SİL");
        malzemeyisilbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                malzemeyisilbtnActionPerformed(evt);
            }
        });

        yenimalzemebirimcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADET", "KG", "GRAM", "LİTRE", "ML", "BARDAK", "KAŞIK" }));
        yenimalzemebirimcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yenimalzemebirimcbActionPerformed(evt);
            }
        });

        yenimalzemeeklebtn.setText("YENİ MALZEME EKLE");
        yenimalzemeeklebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yenimalzemeeklebtnActionPerformed(evt);
            }
        });

        malzemelertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        malzemelertbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                malzemelertblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(malzemelertbl);

        malzemekullanbtn.setText("EKLE");
        malzemekullanbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                malzemekullanbtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("MİKTAR:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("TARİF ADI:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("KATEGORİ:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("HAZIRLANIŞ SÜRESİ:");

        tarifadcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarifadcbActionPerformed(evt);
            }
        });

        tarifguncellebtn.setText("TARİFİ GÜNCELLE");
        tarifguncellebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarifguncellebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(malzemeyisilbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(suretf, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(kategoricb, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tarifadcb, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tarifguncellebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(malzemekullanbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sayfacombo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(miktartf, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(birimlbl)
                                .addGap(13, 13, 13))
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(yenimalzemeadtf, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yenimalzemebirimcb, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yenimalzemeeklebtn, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sayfacombo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(miktartf)
                            .addComponent(birimlbl, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(malzemekullanbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(tarifadcb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kategoricb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(suretf)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(malzemeyisilbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tarifguncellebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yenimalzemebirimcb)
                    .addComponent(yenimalzemeeklebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yenimalzemeadtf, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void yenimalzemebirimcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yenimalzemebirimcbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yenimalzemebirimcbActionPerformed

    private void tarifguncellebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarifguncellebtnActionPerformed
       
        
        
        
        String selectedTarif = (String) tarifadcb.getSelectedItem();
        if (selectedTarif == null) return;

        String kategori = (String) kategoricb.getSelectedItem();
        int newHazirlamasuresi = Integer.parseInt(suretf.getText());
        String newTalimatlar = talimatta.getText();

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            int tarifID = -1; 
            String selectTarifIDQuery = "SELECT TarifID FROM tarifler WHERE TarifAdi = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(selectTarifIDQuery)) {
                pstmt.setString(1, selectedTarif);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        tarifID = rs.getInt("TarifID");
                    }
                }
            }

            if (tarifID == -1) {
                JOptionPane.showMessageDialog(this, "Tarif bulunamadı.");
                return;
            }

            String updateTarifQuery = "UPDATE tarifler SET Kategori = ?, HazirlamaSuresi = ?, Talimatlar = ? WHERE TarifID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(updateTarifQuery)) {
                pstmt.setString(1, kategori); 
                pstmt.setInt(2, newHazirlamasuresi);
                pstmt.setString(3, newTalimatlar);
                pstmt.setInt(4, tarifID); 
                pstmt.executeUpdate();
            }

            String deleteMalzemelerQuery = "DELETE FROM tarifmalzeme WHERE TarifID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(deleteMalzemelerQuery)) {
                pstmt.setInt(1, tarifID);
                pstmt.executeUpdate();
            }

            for (int i = 0; i < hedefmodel.getRowCount(); i++) {
                String malzemeAdi = (String) hedefmodel.getValueAt(i, 0);
                String malzemeMiktar = (String) hedefmodel.getValueAt(i, 1);
                
                String insertMalzemeQuery = "INSERT INTO tarifmalzeme (MalzemeID, MalzemeMiktar, TarifID) SELECT MalzemeID, ?, ? FROM malzemeler WHERE MalzemeAdi = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(insertMalzemeQuery)) {
                    pstmt.setString(1, malzemeMiktar);
                    pstmt.setInt(2, tarifID); 
                    pstmt.setString(3, malzemeAdi);
                    pstmt.executeUpdate();
                }
            }

            JOptionPane.showMessageDialog(this, "Tarif güncellendi.");
            loadTarifAdiFromDatabase(); 
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Güncelleme işlemi sırasında hata oluştu: " + e.getMessage());
        }
    }//GEN-LAST:event_tarifguncellebtnActionPerformed

    private void tarifadcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarifadcbActionPerformed
        String selectedTarif = (String) tarifadcb.getSelectedItem();
        if (selectedTarif == null) return;

        String kategori;
        
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String selectTarifQuery = "SELECT Kategori, HazirlamaSuresi, Talimatlar FROM tarifler WHERE TarifAdi = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(selectTarifQuery)) {
                pstmt.setString(1, selectedTarif);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        kategori = rs.getString("Kategori");
                        kategoricb.setSelectedItem(kategori);
                        suretf.setText(String.valueOf(rs.getInt("HazirlamaSuresi")));
                        talimatta.setText(rs.getString("Talimatlar"));
                    }
                }
            }
            loadMalzemelerForSelectedTarif(selectedTarif);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tarif bilgileri yüklenirken hata oluştu: " + e.getMessage());
        }
    }//GEN-LAST:event_tarifadcbActionPerformed

    private void malzemeyisilbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_malzemeyisilbtnActionPerformed
        int selectedRow = kullanilacakmalzemelertbl.getSelectedRow();
        if (selectedRow != -1) {
            hedefmodel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(tarifguncelleme.this, "Lütfen silinecek bir malzeme seçin.");
                }
    }//GEN-LAST:event_malzemeyisilbtnActionPerformed

    private void malzemelertblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_malzemelertblMouseClicked
        int selectedRow = malzemelertbl.getSelectedRow();
        String malzemeAdi = (String) malzemelertbl.getValueAt(selectedRow, 0);
        String malzemeBirim = malzemeBirimMap.get(malzemeAdi); 
        birimlbl.setText(malzemeBirim);
    }//GEN-LAST:event_malzemelertblMouseClicked

    private void malzemekullanbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_malzemekullanbtnActionPerformed
        int selectedRow = malzemelertbl.getSelectedRow();
        
        
        
        String malzemeAdi = (String) malzemelertbl.getValueAt(selectedRow, 0);
        String malzemeBirim = malzemeBirimMap.get(malzemeAdi); 
        String quantity = miktartf.getText();

        for (int i = 0; i < hedefmodel.getRowCount(); i++) {
            if (hedefmodel.getValueAt(i, 0).equals(malzemeAdi)) {
                JOptionPane.showMessageDialog(this, "Bu malzeme zaten eklenmiş.");
                return; 
            }
        }

        hedefmodel.addRow(new Object[]{malzemeAdi, quantity, malzemeBirim});
        
        miktartf.setText("");
    }//GEN-LAST:event_malzemekullanbtnActionPerformed

    private void yenimalzemeeklebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yenimalzemeeklebtnActionPerformed
        String malzemeAdi = yenimalzemeadtf.getText();
        String malzemeBirim =(String) yenimalzemebirimcb.getSelectedItem();

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String insertMalzemeQuery = "INSERT INTO malzemeler (MalzemeAdi, MalzemeBirim, ToplamMiktar) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertMalzemeQuery)) {
                pstmt.setString(1, malzemeAdi);
                pstmt.setString(2, malzemeBirim);
                pstmt.setInt(3, 0);
                pstmt.executeUpdate();

                yenimalzemeadtf.setText("");
                yenimalzemebirimcb.setSelectedIndex(0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Malzeme kaydetme sırasında hata oluştu: " + e.getMessage());
        }
        kaynakmodel.setRowCount(0);
        loadDataFromDatabase();
    }//GEN-LAST:event_yenimalzemeeklebtnActionPerformed

    private void sayfacomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sayfacomboActionPerformed
        if (sayfacombo.getSelectedItem().equals("TARİF LİSTESİ")) {
            new tariflistesi().setVisible(true);
            dispose();
        }
        
        else if (sayfacombo.getSelectedItem().equals("TARİF EKLE")) {
            new tarifekleme().setVisible(true);
            dispose();
            
        }
        
        
        else if (sayfacombo.getSelectedItem().equals("TARİF SİL")) {
            new tarifsilme().setVisible(true);
            dispose();
            
        }
        
        else if (sayfacombo.getSelectedItem().equals("TARİF GÜNCELLE")) {
            
        }
        
        else if (sayfacombo.getSelectedItem().equals("MALZEME DÜZENLE")) {
            new malzeme().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_sayfacomboActionPerformed

    
    
    private static final String DB_URL = "jdbc:mysql://localhost:3306/yemektarif?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private static final String USER = "root";
    private static final String PASS = "kirpi1974";
    
    private DefaultTableModel hedefmodel;
    private DefaultTableModel kaynakmodel;
    
    private HashMap<String, String> malzemeBirimMap;
    
    
    private void loadTarifAdiFromDatabase() {
        hedefmodel.setRowCount(0);
        
        tarifadcb.removeAllItems();
        
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String selectQuery = "SELECT TarifAdi FROM tarifler";
            try (PreparedStatement pstmt = conn.prepareStatement(selectQuery);
                 ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    tarifadcb.addItem(rs.getString("TarifAdi"));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tarif adı yüklenirken hata oluştu: " + e.getMessage());
        }
    }
    
    
    
    private void loadMalzemelerForSelectedTarif(String selectedTarif) {
        hedefmodel.setRowCount(0); 
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String selectTarifIDQuery = "SELECT TarifID FROM tarifler WHERE TarifAdi = ?";
            int tarifID = -1; 

            try (PreparedStatement pstmt = conn.prepareStatement(selectTarifIDQuery)) {
                pstmt.setString(1, selectedTarif);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        tarifID = rs.getInt("TarifID"); 
                    }
                }
            }

            if (tarifID != -1) {
                String selectMalzemelerQuery = 
                    "SELECT m.MalzemeAdi, tm.MalzemeMiktar, m.MalzemeBirim " +
                    "FROM tarifmalzeme tm " +
                    "JOIN malzemeler m ON tm.MalzemeID = m.MalzemeID " +
                    "WHERE tm.TarifID = ?"; 

                try (PreparedStatement pstmt = conn.prepareStatement(selectMalzemelerQuery)) {
                    pstmt.setInt(1, tarifID); 
                    try (ResultSet rs = pstmt.executeQuery()) {
                        while (rs.next()) {
                            String malzemeAdi = rs.getString("MalzemeAdi");
                            int malzemeMiktar = rs.getInt("MalzemeMiktar");
                            String malzemeBirim = rs.getString("MalzemeBirim");
                            hedefmodel.addRow(new Object[]{malzemeAdi, malzemeMiktar, malzemeBirim});
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tarif bulunamadı.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Malzeme yüklenirken hata oluştu: " + e.getMessage());
        }
    }

    
    
     private void loadDataFromDatabase() {
        
        
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT MalzemeAdi, MalzemeBirim FROM malzemeler")) {

            while (rs.next()) {
                String malzemeAdi = rs.getString("MalzemeAdi");
                String malzemeBirim = rs.getString("MalzemeBirim");
                kaynakmodel.addRow(new Object[]{malzemeAdi}); 
                malzemeBirimMap.put(malzemeAdi, malzemeBirim); 
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Veritabanı bağlantısında hata oluştu: " + e.getMessage());
        }
        
        
    }
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("raven.combobox");
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
        FlatIntelliJLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tarifguncelleme().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel birimlbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> kategoricb;
    private javax.swing.JTable kullanilacakmalzemelertbl;
    private javax.swing.JButton malzemekullanbtn;
    private javax.swing.JTable malzemelertbl;
    private javax.swing.JButton malzemeyisilbtn;
    private javax.swing.JTextField miktartf;
    private javax.swing.JComboBox<String> sayfacombo;
    private javax.swing.JTextField suretf;
    private javax.swing.JTextArea talimatta;
    private javax.swing.JComboBox<String> tarifadcb;
    private javax.swing.JButton tarifguncellebtn;
    private javax.swing.JTextField yenimalzemeadtf;
    private javax.swing.JComboBox<String> yenimalzemebirimcb;
    private javax.swing.JButton yenimalzemeeklebtn;
    // End of variables declaration//GEN-END:variables
}
